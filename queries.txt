Get all schemes
	match (s:Scheme) return s;
new style
	match (p:Package {category:'Scheme'}) return p;

Get all packages/schemes where a scheme depends directly on something other than a collection
    match p = (s:Scheme) -[:depends]-> (q) where NOT 'Collection' IN LABELS(q) return p;
new style
	match p = (s:Package {category:'Scheme'}) -[:depends]-> (q:Package) where NOT q.category = 'Collection' return p;

Check whether no package is included in two collections
	match (c1:Collection) -[:depends]-> (p) <-[:depends]- (c2:Collection) return c1, c2, p;
returns only collection - collection dependencies
new style
   match (t:TLPDB) --> (c1:Package {category:'Collection'}) -[:depends]-> (p)
     <-[:depends]- (c2:Package {category:'Collection'}) <-- (t) where t.revision = 48871
     return c1, c2, p, t;

Find cycles in our dependencies
	match p = (n)-[:depends*]-> (n) return p;
returns context (oooh, that is really stupid ;-)

Find files multiply included
    match (p1) -[:includes]-> (f) <- [:includes]- (p2) return p1, p2, f;

Find all documentation files for a package
    match (p) -[:includes {type:'doc'}]-> (f) where p.name = "tlcockpit" return p,f;


PROBLEM with new style:
	We want to restrict searches only to one revision of a tlpdb!!!


Search where packages change between collections:
	match (t1:TLPDB) -[:contains]-> (c1:Collection) -[:depends]-> 
	              (p:Package) 
            <-[:depends]- (c2:Collection) <-[:contains]- (t2:TLPDB) -[:next]-> (t1) 
	where not (c1.name = c2.name)
	return t1, t2, c1, c2, p ORDER BY t1.date DESC  LIMIT 1 ;
Takes a long time!!!


Search for files moved from one revision to the next
match (t1:TLPDB) --> (p1:TLPackage) --> (f:File) <-- (p2:TLPackage) <-- (t2:TLPDB) 
  where NOT p1.name = p2.name 
  return t1, p1, f, p2, t2




STUFF

timing: about 10-15sec per day for the cypher import


Using Graph Algorithms:
see https://neo4j.com/docs/graph-algorithms/current/

Installation

download from https://github.com/neo4j-contrib/neo4j-graph-algorithms
put into plugin directory
add configuration to neo4j config file
restart neo

* page rank 

CALL algo.pageRank.stream(null, 'depends', {iterations:20, dampingFactor:0.85})
YIELD nodeId, score
MATCH (node) WHERE id(node) = nodeId
RETURN node.name AS page,score
ORDER BY score DESC

yields context as highest page rank ;-)


* betweenness centrality

CALL algo.betweenness.stream(null,'depends',{direction:'out'})
YIELD nodeId, centrality
MATCH (pkg) WHERE id(pkg) = nodeId
RETURN pkg.name AS pkg,centrality
ORDER BY centrality DESC;


* triangles computation

CALL algo.triangleCount.stream(null, 'depends', {concurrency:4})
YIELD nodeId, triangles, coefficient
MATCH (p) WHERE id(p) = nodeId
RETURN p.name AS name, triangles, coefficient
ORDER BY triangles DESC


